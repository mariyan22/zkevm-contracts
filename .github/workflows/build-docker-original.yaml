# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Build-Docker image

on:
  pull_request:
    types:
      - labeled
      - closed
    branches:
      - main  # Adjust this to the appropriate branch name
jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20,x]

    if: >
      github.event.pull_request.merged == true && contains(github.event.pull_request.labels.*.name, 'CI:TriggerBuild')

    steps:
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Set int-bot SSH key
        run: |
          touch /tmp/ssh-key
          echo "${{ secrets.INT_BOT_SSH_KEY }}" > /tmp/ssh-key
          chmod 400 /tmp/ssh-key
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install npm 10.x
        run: |
          npm install -g npm@10
          npm --version  # Verify npm version
          
      - name: setup
        run: |
          eval "$(ssh-agent -s)"
          ssh-add /tmp/ssh-key
          npm install -g npm@latest
          npm i
          sudo curl -L "https://github.com/docker/compose/releases/download/1.26.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          
      - name: Build docker
        run: npm run docker:contracts
      - name: Push docker image
        run: npm run push:docker:contracts
      # Steps to push multi-platform image, it relies on the previous step:
      #  npm run docker:contracts
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: zkevm-contracts
          IMAGE_TAG: latest
        run: |
          docker build -f docker/Dockerfile.geth -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

        
